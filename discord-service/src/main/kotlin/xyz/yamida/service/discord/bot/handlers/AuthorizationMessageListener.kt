package xyz.yamida.service.discord.bot.handlers

import com.fasterxml.jackson.databind.ObjectMapper
import net.dv8tion.jda.api.EmbedBuilder
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent
import net.dv8tion.jda.api.events.session.ReadyEvent
import net.dv8tion.jda.api.hooks.ListenerAdapter
import net.dv8tion.jda.api.interactions.components.buttons.Button
import net.dv8tion.jda.api.interactions.components.text.TextInput
import net.dv8tion.jda.api.interactions.components.text.TextInputStyle
import net.dv8tion.jda.api.interactions.modals.Modal
import org.springframework.kafka.core.KafkaTemplate
import org.springframework.stereotype.Component
import xyz.yamida.service.discord.bot.storager.RequestStorage
import xyz.yamida.service.discord.dto.RegistrationRequestDTO
import xyz.yamida.service.discord.entity.User
import xyz.yamida.service.discord.repository.PunishmentRepository
import xyz.yamida.service.discord.repository.UserRepository
import java.time.OffsetDateTime
import java.time.temporal.ChronoUnit

@Component
class AuthorizationMessageListener(
    val userRepository: UserRepository,
    val punishmentRepository: PunishmentRepository,
    val kafkaTemplate: KafkaTemplate<String, String>,
    val objectMapper: ObjectMapper
) : ListenerAdapter() {

    override fun onButtonInteraction(event: ButtonInteractionEvent) {
        if (event.componentId != "authmenu_button") return

        val punishments = punishmentRepository.findByDiscordId(event.user.id) ?: emptyList()
        punishments.forEach {
            println(it)
        }
        if (punishments.any { it.type == "ban" }) {
            event.replyEmbeds(createBanEmbed(punishments.first { it.type == "ban" }.reason)).setEphemeral(true).queue()
            return
        }
        if (RequestStorage.isRequested(event.user.id)) {
            event.reply("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.").setEphemeral(true).queue()
            return
        }

        val existingUser = userRepository.findByDiscordId(event.user.id)
        if (existingUser != null) {
            event.replyEmbeds(createAlreadyRegisteredEmbed(existingUser.gameNickname)).setEphemeral(true).queue()
            return
        }

        event.replyModal(createRegistrationModal()).queue()
    }

    override fun onModalInteraction(event: ModalInteractionEvent) {
        if (event.modalId != "auth_modal") return

        val nickname = event.getValue("nickname")?.asString ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        val daysSinceRegistration = ChronoUnit.DAYS.between(event.user.timeCreated, OffsetDateTime.now())

        if (daysSinceRegistration < 5) {
            sendVerificationRequest(event, nickname)
            RequestStorage.addRequest(event.user.id, nickname)
            event.reply("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.").setEphemeral(true).queue()
        } else {
            handleUserRegistration(event, nickname)
        }
    }

    fun sendVerificationRequest(event: ModalInteractionEvent, nickname: String) {
        val verificationChannel = event.jda.getTextChannelById("1294968774319145000") ?: return

        val embed = EmbedBuilder()
            .setTitle("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            .setDescription("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${event.user.asMention}\n–î–∏—Å–∫–æ—Ä–¥ ID: `${event.user.id}`\n–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫: `$nickname` \n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${event.user.timeCreated}")
            .setColor(0xFFA500)
            .setFooter("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –º–µ–Ω–µ–µ 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
            .build()

        verificationChannel.sendMessageEmbeds(embed)
            .setActionRow(
                Button.danger("ban_user:${event.user.id}", "üö® –ó–∞–±–∞–Ω–∏—Ç—å"),
                Button.success("accept_user:${event.user.id}", "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É"),
                Button.secondary("reject_user:${event.user.id}", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
            ).queue()
    }

    fun handleUserRegistration(event: ModalInteractionEvent, nickname: String) {
        try {
            val user = userRepository.save(User(discordId = event.user.id, gameNickname = nickname))
            val request = RegistrationRequestDTO(user.discordId, user.gameNickname)
            kafkaTemplate.send(request.topic, request.toTransfer(objectMapper))
            event.user.openPrivateChannel().queue { privateChannel ->
                privateChannel.sendMessageEmbeds(EmbedBuilder()
                    .setTitle("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    .setDescription("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à –Ω–∏–∫: `$nickname`\n**IP**: `mc.yamida.xyz` **–í–µ—Ä—Å–∏—è**: `1.21.3`")
                    .setColor(0xF695CB)
                    .build()).queue()
            }
            event.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.").setEphemeral(true).queue()
        } catch (e: Exception) {
            event.reply("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${e.message}").setEphemeral(true).queue()
        }
    }

    override fun onReady(event: ReadyEvent) {
        event.jda.getTextChannelById(1327400152545099849)?.sendMessageEmbeds(
            EmbedBuilder()
                .setTitle("–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä:")
                .setDescription(
                    """
                –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –≤ Minecraft.
                –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞—à Discord –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.

                **–í–∞–∂–Ω–æ!**
                –í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ç–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç **Discord** –∞–∫–∫–∞—É–Ω—Ç –æ—Ç **Minecraft** –∞–∫–∫–∞—É–Ω—Ç–∞. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.
                """.trimIndent()
                )
                .setColor(0xF695CB)
                .build()
        )?.setActionRow(Button.primary("authmenu_button", "‚úçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"))?.queue()
    }

    fun createBanEmbed(reason: String) = EmbedBuilder()
        .setTitle("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        .setDescription("–ü—Ä–∏—á–∏–Ω–∞: `$reason`")
        .setColor(0xFF0000)
        .build()

    fun createAlreadyRegisteredEmbed(nickname: String) = EmbedBuilder()
        .setTitle("–ê–∫–∫–∞—É–Ω—Ç")
        .setDescription("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à –Ω–∏–∫: `$nickname`")
        .setColor(0xF695CB)
        .build()

    fun createRegistrationModal() = Modal.create("auth_modal", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        .addActionRow(
            TextInput.create("nickname", "–í–∞—à –Ω–∏–∫–Ω–µ–π–º", TextInputStyle.SHORT)
                .setPlaceholder("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º")
                .setRequired(true)
                .build()
        ).build()
}